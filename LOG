  . priorizar encontrar algun set de condiciones tal que la estimación ande y de
    ahí arrancar a mejorar. para esto se puede
    - armar una lista de sugerencias / herramientas respecto de como obtener
      mejores resultados
    - agregar reestricciones al sistema tal que eviten caer en condiciones que
      dan malos resultados

  . usuarios
    - quien usa únicamente los plugins para reportar donde se está mirando
    - quien arma sus propios plugins
    - quien quiera utilizar el eyetracker en otro contexto
    
    . asique hay que distinguir esas interfaces
    
  . encapsular código ajeno
    se puede armar el código tal que tanto webgazer como su extension puedan
    reemplazarse. todos los llamados que haga a ambas librerías tendrían que
    pasar por una capa nuestra. de esta manera estaríamos construyendo la API
    requerida por nosotros en lugar de usar las APIs que nos son ofrecidas.
  . esto nos va a permitir diversos problemas que van apareciendo con WG en sí.
    Se podría por ejemplo evitar el delay que hay entre el pedido de la última
    estimación y su respuesta
    
  . validar calibración durante la calibración en sí
    en ese momento se pueden realizar hipótesis sobre dónde está mirando el
    usuario en qué momento. en los momentos anteriores al click hay muchas
    chances de que el usuario esté mirando ahí. hay que chequear bien con la
    bibliografía (TG creo que usaba los últimos 0.5 segundos de los 1.5 segundos
    que mostraba el estímulo al usuario)
