  . armar instancia de experimentación online
    . subirlo a cognition.run

    . agregar eyetracking
      . esto puede tomar un rato porque acá hay chances de tener que cambiar la
        interfaz jspsych. Lo que armé de decorar un único trial no sé funciona
        tan bien
      . Capaz es más sencillo que los listeners de eventos se manejen nomás en
        los plugins init / finish, ya más pensando en verlo como una extensión
        de JSPsych. Rastoc exportaría entonces los mismos eventos (estimation,
        decalibration, calibration) que exporta ahora pero unificados en un
        único array al final de todo. El tema de los timestamps del trial 
        quedaría en manos del usuario, que es además algo totalmente específico
        al diseño de cada experimento. Los únicos gráficos generalizable son un
        heatmap de dónde estuvo mirando el usuario y un gráfico que muestre el
        histórico de calibración, descalibración, alguna medida de confianza
      . luego al usuario habría que pedirle
        - que use esos dos plugins + lo del `rastoc:ready`
        - que previo a cada trial haga un llamado al plugin que chequea si el
          sistema está o no calibrado
      . lo de pausar rastoc ni aplica la verdad acá ya que los trials son bien
        cortos y sin mucha cosa entremedio. En todo caso se puede comentar en la
        doc la posibilidad de pausarlo para dejar de consumir recursos

    . chequear si puedo agregar algo más de captura de hardware como por ejemplo
      la resolución o el tipo de la cámara. Dsp al momento de presentar el exp
      estaría bueno consultar al sujeto la posición de la cámara

  . armar lo de la medida de confianza y agregarlo al plot de la historia del
    experimento
    . hay que tomar extender el detector de movimiento para que se le pueda
      preguntar qué tan lejos de la posición inicial está el sujeto

  . rename canvasDrawer to drawer (creo que esto vuela con la introducción de
    psychophysics)
  . mover shuffle y sleep a utils y rastoc-lib

  . permitir que el data analysis pueda recibir múltiples experimentos por
    instancia de JSPsych
    . Parte del código puede estar armado sin bancar esto 
  . permitir que el data analysis pueda recibir instancias de JSPsych de
    múltiples sujetos

  . investigar qué datos de hardware se pueden recolectar
    . como mínimo hay que acumular los tamaños de la pantalla (eso creo que ya
      está)

  . armar algún duck hunting bien sencillo donde se apunta con la mirada y se
    dispara con la barra de espacio. 

  . ver bien como hacer lo de usar rastoc sin JSPsych
    . revisar la inicialización de WG
      . el módulo de WG y la extension de JSPsych hay que agregarlas al
        directorio `/build` para facilitar la instalación
      . no debería ser necesario el llamado a `jsPsych.init`. Dsp hay que
        recrear la inicializción. Tiene que seguir siendo compatible con JSPsych
    . en `rastoc-lib` armar algún js que agregue controles al viewport
        - display de info de rastoc: si está lista o no la libreria, si se
          descalibró el sistema
        - botón para calibrar: al clickearlo se dibuja un overlay donde se
          dibujan los estímulos para la calibración
        - botón para exportar la data: al clickearlo te ofrece a descargar un
          archivo con los eventos que se generan
    . armar una web genérica par tener de playground

  . ver un poco el tema de handlear los errores mejor
    - si el tab con el experimento se deja abierto en background, hay chances de
      que crashee
