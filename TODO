  . retrabjar sampleo de estimaciones
    . ahora se reportan estimaciones cada 1000 / 24 ms pero la realidad es que
      ese dato que se reporta puede ser el mismo y tampoco corresponde el ts
      en el cual se realizó la estimación
    . los loops que están atados al recambio de frames tienen que actualizarse
      con el `requestAnimationFrame` pero luego deben emitirse eventos del
      estilo `eyes positions estimated`, `gaze estimated` para que los datos
      puedan consumirse

    - usar el `setGazeListener` de WG
    - aplicar la misma idea (animation frame vs event) al detector de
      movimiento. El reporte del facemesh puede incluso separarse en un módulo
      aparte por si eventualmente se lo quiere usar para un estimador de la
      mirada propio
    - volar lo de que se retornan los eventos al cambiar de etapas con rastoc.
      En lugar de eso emitir los eventos directo al `document` para que puedan
      ser consumidos donde sea necesario. La interfaz de JSPsych cambiarla 
      para que nomás en `rastoc-initialize` se suscriba a los eventos y los
      vaya guardando en algún arreglo que es exportado luego con
      `rastoc-finish`

  . armar releases
    . el objetivo es que quien luego quiera usar Rastoc necesite nomás copiar
      la carpeta esa y ya poder salir andando

  . detallar la data del experimento de antisacadas
    . ahora se solapan datos de los distintos trials porque están medio flojos
      los timestamps disponibles. En cada trial quedan estimaciones del trial
      anterior. En los heatmaps se ve con unas manchas que están de más.
    . luego con ese detalle hay que extender un poco el análisis de datos

  . investigar qué datos de hardware se pueden recolectar

  . experimentos
    . aclarar en algún lado el protocolo y cantidad de trials
    . TMT
    . antisacadas vertical
      . no tiene valor clínico pero puede permitir validar los resultados
      . menos trials que el antisacada horizontal
    . movimiento continuo lento de un punto

  . escritura
    . arrancar a escribir la tesis en un doc
      - método: explicar lo que se armó
      - motivación: costos, remotismo, aplicabilidad
      - experimentos: cuáles se van a realizar? tienen interés clínico o son
        para validar?
      - ojos: brevemente, qué elementos de la visión nos interesan? qué tiempos
        y que precisión necesitamos?
      - implementaciones existes: qué herramientas ya existen? cómo andan? dónde
        andan? aplican a nuestro caso de uso?
      - algoritmos de eyetracking: qué categorias existen? que requerimientos de
        hadrware tienen? cuáles nos sirven?
    . método, intro, experimentos que se realizan, motivación, aplicabilidad,
      contexto del ojo (precisión y tiempos que se buscan)

  . experimentación
    . diseñar experimento online
      . para hacer una validación inicial
      . experimentos cortos 5, 10 mins
      . conseguir ~20 sujetos
      . idealmente para enero
    . diseñar experimento presencial
      . comparación contra un eyetracker profesional
      . en laboratorio, experimentos más largos (30, 40 mins)
      . implica implementar los mismos experimentos para ambas plataformas
      . idealmente a esta altura ya tendría que estar el tema de las releases y
        habría que probarlo en Windows por las dudas

  . la distribucion de los puntos de calibracion podria tener en cuenta el
    tamaño del viewport. Si la pantalla es grande los puntos quedan en los
    extremos.

  . ver un poco el tema de handlear los errores mejor
    - si el tab con el experimento se deja abierto en background, hay chances de
      que crashee
